{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAceA,EAZJ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACtB,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCYLK,EAjBA,SAAC,GAAc,IAAZC,EAAW,EAAXA,OACd,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAS,kBAAC,EAAD,CACTC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCGtBW,EAbE,SAAC,GAA+B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKX,UAAU,OACX,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCKPI,EAVA,SAACC,GAEZ,OADAC,QAAQC,IAAI,SAER,yBAAKC,MAAO,CAAEC,SAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC5DN,EAAMO,WC2CJC,G,kBA3CX,aAAc,IAAD,8BACT,+CAcJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACjB,YAAagB,EAAME,OAAOC,SAdzC,EAAKC,MAAM,CACH1B,OAAQ,GAERM,YAAa,IALZ,E,iFASO,IAAD,OACfqB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACvB,OAAO+B,S,+BAO/B,IAAD,EAC4BC,KAAKN,MAA7B1B,EADJ,EACIA,OAAQM,EADZ,EACYA,YACV2B,EAAajC,EAAOkC,QAAO,SAAAC,GAC7B,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS/B,EAAY8B,kBAGzD,OAAIpC,EAAOsC,OAMP,yBAAK1C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcyB,KAAKX,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUrB,OAAQiC,MATnB,2C,GA3BDM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.bc7b3208.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card=({ name, email,id })=>{\n    return (\n        <div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n//br3-border of 3px,pa3-padding,ma2-margin,grow some css style ,these things is using \"tachyons\"\n//props.name becoz this is js expression so i need to wrap it in {} bracktes like in JSX\n// <img alt='robots' src={`https://robohash.org/${props.id}?200x200`}/> \n\n// const Card=({ name, email,id }) {this is called distructors}\n// we had template string becoz this was template string we had wrapped in js express { `alkfjssl${props.id}`}","import React from 'react';\nimport Card from './Card';\n\nconst CardList=({ robots })=>{\n    return(\n        <div>\n            {\n                robots.map((user,i) => {\n                    return ( <Card \n                    key={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email} \n                    />\n                    );\n                })\n            }\n        </div>\n    );\n}\nexport default CardList;\n\n\n//Basic lecture notes\n//whenever you do loop in react you have to give  unique key\n// key prop should have something that dosent change ,for example,index(or i in our case) could chagne if array items getComputedStyle\n// moved ,so a better key in this case would be something unique like id.\n/*\nconst CardList=({ robots })=>{\n    const cardArray=robots.map((user,i) => {\n        return ( <Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email} \n        />\n        );\n    })\n    return(\n        <div>\n            {cardArray}\n        </div>\n    );\n}*/","import React from 'react';\n\nconst SearchBox =({ searchfield,searchChange })=>{\n    return(\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots' \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;\n//we are using destructing here:\n// ({...})-allows us to grab the props object and grab its properties **searchfiel is actually not used and will be removed in upcoming video\n// onChange is an event like click or hover that we did earlier","import React from 'react';\n/*State\nprops\nchildren*/\nconst Scroll = (props)=>{\n    console.log('props');\n    return (\n        <div style={{ overflow: 'scroll',border:'1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n\n    ); \n};\n\nexport default Scroll;\n\n/*\nCSS: overflow-y\njsx: overflowY\n*/","import React ,{ Component }from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n\nclass App extends Component{\n    constructor(){\n        super()\n        this.state={\n                robots: [],                \n               \n                searchfield: ''\n            }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users =>this.setState({robots:users}))\n    }\n\n    onSearchChange=(event)=>{\n        this.setState({searchfield: event.target.value})\n    }\n\n    render(){\n        const { robots ,searchfield } = this.state;\n        const filterRobots=robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        \n        if(!robots.length){\n            return <h1>Loading</h1>\n        }\n\n        else{\n        return (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filterRobots}/>\n                </Scroll>\n            </div>\n        );\n        }\n    }\n        \n}\nexport default App;\n\n//States >> props\n//PROPS are simply things that comes out of the state\n//STATE is simply a discription of our app ,like robots and whatever is entered into a searchbox,state is able to change\n//so a parent feeds states in a child component and as soon as child component receves a state ,its a property that child can never its property ,its parent tells it what the state is and child recieves it as robots\n\n//constructor() and render() are prebuilt in react anytime you make your own methods on a component use     \n//\"onSearchChange=(event)=>{... }\" this syntax arrow function this make sures that this vaule is according to where it was created which is the app in our case\n\n/*We have our app components that has two states Robots and searchfield\n-because app owns the state so any components that has a state uses the  class syntax so they can use constructor to create \nthis.state(and this state is what changes in an app,its what  describes the app),remember  when we said virtual DOM is just an JS object ,virtual DOM is just an object that collects entier this.state and react uses to render and pass them down as props to these components,so these components which are just pure functions,can render\nApp is the only thing that can change the state,but it can pass down things such as props like we pass down onSearchChange to the searchbox and the everytime there is onchange on input,it lets the App know hey there is change run ,onSearchChange function with the even and update the state to whatever we type ,\n\n-now with the information that we have from the searchBox ,we can now communicate with cardlist and tell it ,I want to filter the robot state to now have only includes in searchfield,\ninstead of passing \"this.state.robots\" we just passed the \"filteredrobots\" \n\nIn real life when we start of this app robots: [] actually be an empty array,we haven't grab the user\n\nreact comes with component called \"lifecycle method\" (https://reactjs.org/docs/react-component.html#componentwillunmount)\n--Mounting\n-constructor()\n-componentWillMount()\n-render()-everytime states changes render() gets executed\n-componentDidMount()\n\n--Updating\n-static getDerivedStateFromProps()\n-shouldComponentUpdate()\n-render()\n-getSnapshotBeforeUpdate()\n-componentDidUpdate()\n\n--Unmounting(when we move to differnt page component gets unmounted)\n-componentWillUnmount()\nwhen i refresh the page the app component gets mounted ,into the document with id='root' so in index.html file we are replacing <div id='root'> and adding our entire App,so mounting is start of the app\nwindow.fetch()-it is method to make request to the servers\nimport { robots } from './robots';\n\n\"sudo npm run build\" for proper and minified version of everything //helps for  optimizing web\n\n console.log('constructor');//just for checking the order of execution\n\n // .then(users =>{}),//we will get loading\n\n this.setState({searchfield: event.target.value})//changing the state so that search field always gets updated\n        //now filtering the robots according to the searchfield\n        // console.log(filterRobots);\n\n\n// console.log('render');\nreturn <h1>Loading</h1>//if users are more and you want to show the message\n // robots: robots,\n\n        */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';//view library\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n//React uses JSX to create their virtual DOM ,that they built based on what we give it to them ,then they look at the virtual DOM \n// and Reak DOM and say this part has changed i'm going to change DOM now based on  virtual DOM"],"sourceRoot":""}